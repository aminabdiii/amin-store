import{u as r}from"./useQuery-cduBLe5R.js";import{s as t}from"./supabase-ClnIyvqL.js";import{u as a}from"./useGetUser-B0ZVdZSb.js";async function e({userId:r}){const{data:a,error:e}=await t.from("carts").select("cart_items").eq("user_id",r).single();if(e)throw new Error(e);return a}async function s({product:r,userId:a}){const s={...r,count:1},o=[...(await e({userId:a})).cart_items,s],{error:i,data:u}=await t.from("carts").update({cart_items:o}).eq("user_id",a);if(i)throw new Error(i);return u}async function o({productId:r,userId:a}){const s=(await e({userId:a})).cart_items.filter((t=>t.id!==r)),{error:o,data:i}=await t.from("carts").update({cart_items:s}).eq("user_id",a);if(o)throw new Error(o);return i}async function i({productId:r,userId:a,count:s}){const o=await e({userId:a}),i=[...o.cart_items.filter((t=>t.id!==r)),{...o.cart_items.find((t=>t.id===r)),count:s}],{data:u,error:n}=await t.from("carts").update({cart_items:i}).eq("user_id",a);if(n)throw new Error(n);return u}async function u({userId:r}){const{error:a,data:e}=await t.from("carts").update({cart_items:[]}).eq("user_id",r);if(a)throw new Error(a);return e}function n(){const t=localStorage.getItem("sb-ddjggonagtvxnthvjxtr-auth-token"),{user:s}=a(),{data:o,isLoading:i}=r({queryKey:["cart"],queryFn:()=>t?e({userId:s.id}):null});return{cartProducts:o,isLoading:i}}export{s as a,i as b,u as c,o as r,n as u};
